Assignment 7
Design an LR(0) parser that will check the validity of proposition logic expressions and generate its truth table. Also check satisfiablility/tautology/fallacy of the expression.

Valid Tokens
1. A-Z (excluding T and F), a-z (excluding t and f)  are tokens of length 1 represent Boolean variables
   whole values are either T/t for true or F/f for false.
2. T/t and F/f are constants representing true and false respectively.
3. Operator /\ stands for 'AND'.
4. Operator \/ stands for 'OR'.
5. Operator ~ stands for 'NOT'.
6. Operator -> stands for 'implication'.
7. Operator <-> stands for 'if and only if'.
8. Operator ( stands for 'opening parenthesis'.
9. Operator ) stands for 'closing parenthesis'.

Operator Precedence  Associativity

highest ()              Left
        ~               Right
        <->             Left
        ->              Left  
        /\              Left
lowest  \/              Left

Errors Handled by this system

1. Lexical Error occurs when invalid tokens are found. The error and its position in the imput string should be displayed.
2. Syntax or Parse Error:
(i) Incomplete expression.
(ii) Operator missing when two operands are consecutive.
(iii) Expression missing when open parenthesis and close parenthesis are consecutive elements in the input string and vice versa.
(iv) Operand missing for a binary operator.
(v) Operand missing for an unary operator.
(vi) Consecutive Binary Operators -> operand missing.
(vii) Missing of an '(' for a ')'.
