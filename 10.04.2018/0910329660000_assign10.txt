1. Write a program to convert a number in decimal to its binary equivalent. Rewrite the program with bitwise operators. Compare the performance
   of each version.
2  Optimize the following code fragment by avoiding if-else statement
   for(i=0;i<1000;i++)
     { 
         if(i%2==1)
            P[i]=1;
         else
            P[i]=2;
     }
   Discuss the improvement achieved after optimization.
3. Unroll the following loop with loop unrolling factor 4.
   for(i=0;i<1024;i++)
     {
       total[i]=X[i]+Y[i];     
     }
   Compare the performance of the loop unrolled version with the naive version. What will be the effect if we go on increasing the 
   loop unrolling factor.

4. Implemention matrix multiplication using loop tiling with a blocking factor 4. Consider A and B as 16 x 16 matrices and multpliply them
 to obtain the matrix C using loop tiling. Compare the basic and loop tiled approaches with respect to performance.

5. Concatenate the following loop (loop jamming) and explain the performance gain achieved by it.
    for(i=0;i<10;i++)
          for(j=0;i<10;j++)
               A[i][j]=0;
    for(i=0;i<10;i++)
          A[i][i]=0; 
6.  Re-write the following code fragment with minimum number of induction variables. Explain its advantage.
    extern int sum;
    int foo(int n) {
       int i, j;
       j = 5;
       for (i = 0; i < n; ++i) {
              j += 2;
              sum += j;
       }
     return sum;
    } 
7. Perform loop-invariant code motion on the following code. Explain its benefit.
   for (int i = 0; i < n; i++) {
       x = y + z;
      a[i] = 6 * i + x * x;
   }
